# -*- coding: utf-8 -*-
"""HW2_selenium.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rLbknmvU-_oONSoBAwW11unSLYQX03XT
"""

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# # Ubuntu no longer distributes chromium-browser outside of snap
# #
# # Proposed solution: https://askubuntu.com/questions/1204571/how-to-install-chromium-without-snap
# 
# # Add debian buster
# cat > /etc/apt/sources.list.d/debian.list <<'EOF'
# deb [arch=amd64 signed-by=/usr/share/keyrings/debian-buster.gpg] http://deb.debian.org/debian buster main
# deb [arch=amd64 signed-by=/usr/share/keyrings/debian-buster-updates.gpg] http://deb.debian.org/debian buster-updates main
# deb [arch=amd64 signed-by=/usr/share/keyrings/debian-security-buster.gpg] http://deb.debian.org/debian-security buster/updates main
# EOF
# 
# # Add keys
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DCC9EFBF77E11517
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 648ACFD622F3D138
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 112695A0E562B32A
# 
# apt-key export 77E11517 | gpg --dearmour -o /usr/share/keyrings/debian-buster.gpg
# apt-key export 22F3D138 | gpg --dearmour -o /usr/share/keyrings/debian-buster-updates.gpg
# apt-key export E562B32A | gpg --dearmour -o /usr/share/keyrings/debian-security-buster.gpg
# 
# # Prefer debian repo for chromium* packages only
# # Note the double-blank lines between entries
# cat > /etc/apt/preferences.d/chromium.pref << 'EOF'
# Package: *
# Pin: release a=eoan
# Pin-Priority: 500
# 
# Package: *
# Pin: origin "deb.debian.org"
# Pin-Priority: 300
# 
# 
# Package: chromium*
# Pin: origin "deb.debian.org"
# Pin-Priority: 700
# EOF
# 
# # Install chromium and chromium-driver
# apt-get update
# apt-get install chromium chromium-driver
# 
# # Install selenium
# pip install selenium

!pip install selenium==4.3.0

# 導入Selenium的webdriver模組，用於控制Chrome瀏覽器。
from selenium import webdriver

# 從Selenium函式庫的common.by模組中導入`By`，用於指定元素的定位方式。
from selenium.webdriver.common.by import By

#導入其他所需套件
import pandas as pd
from google.colab import files

# 建立ChromeOptions物件，這個物件用於設定Chrome瀏覽器的選項。
chrome_options = webdriver.ChromeOptions()

# 使用add_argument()方法添加--headless參數，使Chrome以headless模式運行，即在後台運行，不顯示GUI界面。
chrome_options.add_argument('--headless')

# 使用add_argument()方法添加--no-sandbox參數，這是一個必要的參數，用於解決在某些環境下的運行問題。
chrome_options.add_argument('--no-sandbox')

# 將 headless 屬性設置為 True。
chrome_options.headless = True

# 初始化Chrome WebDriver，並傳遞Chromedriver的路徑和選項。
driver = webdriver.Chrome(options=chrome_options)

# 設置隱式等待時間為10秒。隱式等待是在查找元素時的一種等待方式，
# 如果WebDriver沒有找到元素，它會等待一定的時間再進行查找，直到超過設定的時間為止。
driver.implicitly_wait(10)

# 使用get方法訪問指定的URL
driver.get("https://travel.ettoday.net/category/%E9%9F%93%E5%9C%8B%E6%97%85%E9%81%8A/")

# 尋找具有class名稱"part_pictxt_1"的元素
container = driver.find_element(By.CLASS_NAME, "part_pictxt_1")
# 在container元素內找到所有img標籤的元素
headline_img = container.find_elements(By.TAG_NAME, "img")
# 在container元素內找到所有em標籤的元素
datePublished_em = container.find_elements(By.TAG_NAME, "em")

# 建立兩個空列表
headline = []
datePublished = []

# 將每個元素h中class=alt存至headline中，並列印
for h in headline_img:
  headline.append(h.get_attribute("alt"))
  print(h.get_attribute("alt"), "\n")

# 將每個元素d中class=content存至datePublished中
for d in datePublished_em:
  datePublished.append(d.get_attribute("content"))

#將兩個列表寫入DataFrame
df = pd.DataFrame({'日期':datePublished,'新聞標題':headline})
# 將DataFrame寫入CSV檔案
df.to_csv('travel_news.csv', index=False, encoding='utf-8-sig')
files.download('travel_news.csv')

# 這個方法會關閉WebDriver並結束瀏覽器進程。這是為了確保在使用完瀏覽器後，程式可以正確地退出。
driver.quit()