# -*- coding: utf-8 -*-
"""week9_demo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O1Xd4oxWrEAVEy54FDvohyjAiXhm_-KF
"""

# Connetced yourself Cloud Storage
from google.colab import drive
drive.mount('/content/gdrive/', force_remount=True)

import os
os.chdir("自己雲端硬碟的鏈結位置")
os.listdir()

# Commented out IPython magic to ensure Python compatibility.
# %%shell
# # Ubuntu no longer distributes chromium-browser outside of snap
# #
# # Proposed solution: https://askubuntu.com/questions/1204571/how-to-install-chromium-without-snap
# 
# # Add debian buster
# cat > /etc/apt/sources.list.d/debian.list <<'EOF'
# deb [arch=amd64 signed-by=/usr/share/keyrings/debian-buster.gpg] http://deb.debian.org/debian buster main
# deb [arch=amd64 signed-by=/usr/share/keyrings/debian-buster-updates.gpg] http://deb.debian.org/debian buster-updates main
# deb [arch=amd64 signed-by=/usr/share/keyrings/debian-security-buster.gpg] http://deb.debian.org/debian-security buster/updates main
# EOF
# 
# # Add keys
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DCC9EFBF77E11517
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 648ACFD622F3D138
# apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 112695A0E562B32A
# 
# apt-key export 77E11517 | gpg --dearmour -o /usr/share/keyrings/debian-buster.gpg
# apt-key export 22F3D138 | gpg --dearmour -o /usr/share/keyrings/debian-buster-updates.gpg
# apt-key export E562B32A | gpg --dearmour -o /usr/share/keyrings/debian-security-buster.gpg
# 
# # Prefer debian repo for chromium* packages only
# # Note the double-blank lines between entries
# cat > /etc/apt/preferences.d/chromium.pref << 'EOF'
# Package: *
# Pin: release a=eoan
# Pin-Priority: 500
# 
# Package: *
# Pin: origin "deb.debian.org"
# Pin-Priority: 300
# 
# 
# Package: chromium*
# Pin: origin "deb.debian.org"
# Pin-Priority: 700
# EOF
# 
# # Install chromium and chromium-driver
# apt-get update
# apt-get install chromium chromium-driver
# 
# # Install selenium
# pip install selenium

!pip install selenium

"""# 使用 CSS Selector

請找出並列印 "札根學習 Python 程式設計 - 176 個絕對想馬上跟著做的「超互動範例」" 這本書的圖片網址與文本內容。


"""

# 這段程式碼是使用子進程來執行pip安裝cssselect模組，並使用requests和lxml.html模組來解析網頁內容。


# 導入sys模組，用於訪問系統相關的功能。
import sys

# 導入subprocess模組，用於建立和管理子進程，以執行命令行操作。
import subprocess

# 使用check_call函數執行指定的命令，該函數會等待命令完成並檢查返回碼。
# 在這裡，指定的命令是一個列表，包含要在命令行中執行的命令以及相應的參數。其中：
# -`sys.executable`提供Python解釋器的路徑，以確保在正確的環境中執行pip。
# -`-m pip` 表示使用Python的pip模組。
# -`install cssselect` 是指定要安裝的模組。
subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'cssselect'])

# 導入requests函式庫，它是用於向網站發送HTTP請求以取得網頁資源的常用函式庫。
import requests

# 導入lxml函式庫中的html模組，用於解析HTML文件並建構ElementTree物件。
from lxml import html

# 發送一個GET請求到指定的URL（"http://www.flag.com.tw/books/school_code_n_algo"），
# 並將回應儲存在變數r中。
r = requests.get("http://www.flag.com.tw/books/school_code_n_algo")

# 使用lxml.html模組中的fromstring()函式將回應的HTML文本轉換為ElementTree物件，儲存在變數tree中。
tree = html.fromstring(r.text)

# 使用CSS選擇器來選擇特定的HTML元素。這裡選擇了第一個`<img>`元素，並將其儲存在tag_img中。
tag_img = tree.cssselect("body > section.allbooks > table > tr:nth-child(10) > td:nth-child(3) > a > img")[0]

# 輸出圖片的URL。
print(tag_img.attrib["src"])
print('---------------------------')

# 使用CSS選擇器來選擇第一個`<p>`元素，並將其儲存在`tag_p`中。
tag_p = tree.cssselect("body > section.allbooks > table > tr:nth-child(10) > td:nth-child(3) > a > p")[0]

# 輸出`tag_p`元素的文本內容為
# 札根學習 Python 程式設計 - 176 個絕對想馬上跟著做的「超互動範例」。
print(tag_p.text)

"""# 使用 XPath

請找出並列印 "ChatGPT✕Excel VBA 網路爬蟲與資料分析：使用生成式 AI 「重啟」你的 Excel 辦公室自動化" 這本書的圖片網址與文本內容。
"""

# 這段程式碼使用requests和lxml.html模組來解析網頁內容。


# 導入requests函式庫，它是用於向網站發送HTTP請求以取得網頁資源的常用函式庫。
import requests

# 導入lxml函式庫中的html模組，用於解析HTML文件並建構ElementTree物件。
from lxml import html

# 發送一個GET請求到指定的URL（"http://www.flag.com.tw/books/school_code_n_algo"），
# 並將回應儲在存變數r中。
r = requests.get("http://www.flag.com.tw/books/school_code_n_algo")

# 使用lxml.html模組中的fromstring()函式將回應的HTML文本轉換為ElementTree物件，儲存在變數tree中。
tree = html.fromstring(r.text)

# 使用XPath表達式來選擇指定的HTML元素。這裡選擇第一個`<img>`元素，並將其儲存在`tag_img`中。
tag_img = tree.xpath("/html/body/section[2]/table/tr[2]/td[1]/a/img")[0]

# 輸出圖片的URL。
print(tag_img.attrib["src"])
print('---------------------------')

tag_p = tree.xpath("/html/body/section[2]/table/tr[2]/td[1]/a/p")[0]
print(tag_p.text)

"""# 使用 find_element & By_TAG_NAME

找出並列印文本內容為"程式設計與演算法"。
"""

# 這段程式碼是使用Selenium函式庫來控制Chrome瀏覽器，並從網頁中提取特定元素的文本內容。


# 導入Selenium的webdriver模組，用於控制Chrome瀏覽器。
from selenium import webdriver

# 從Selenium函式庫的common.by模組中導入`By`，用於指定元素的定位方式。
from selenium.webdriver.common.by import By

# 建立ChromeOptions物件，這個物件用於設定Chrome瀏覽器的選項。
chrome_options = webdriver.ChromeOptions()

# 使用add_argument()方法添加--headless參數，使Chrome以headless模式運行，即在後台運行，不顯示GUI界面。
chrome_options.add_argument('--headless')

# 使用add_argument()方法添加--no-sandbox參數，這是一個必要的參數，用於解決在某些環境下的運行問題。
chrome_options.add_argument('--no-sandbox')

# 將 headless 屬性設置為 True。
chrome_options.headless = True

# 初始化Chrome WebDriver，並傳遞Chromedriver的路徑和選項。
driver = webdriver.Chrome(options=chrome_options)

# 設置隱式等待時間為10秒。隱式等待是在查找元素時的一種等待方式，
# 如果WebDriver沒有找到元素，它會等待一定的時間再進行查找，直到超過設定的時間為止。
driver.implicitly_wait(10)

# 使用get方法訪問指定的URL，在此是"https://www.flag.com.tw/books/school_code_n_algo"。
driver.get("https://www.flag.com.tw/books/school_code_n_algo")

# 使用Selenium的定位函數，使用find_element()方法按標籤名（TAG_NAME）查找指定的元素，在此是h2標籤。
h2 = driver.find_element(By.TAG_NAME, "h2")

# 輸出元素的文本內容。
print(h2.text)

"""# 使用 find_element & By_CLASS_NAME

找出並列印文本內容為"程式設計與演算法"。
"""

# 這段程式碼是使用Selenium函式庫來控制Chrome瀏覽器，並從網頁中提取特定元素的文本內容。


# 導入Selenium的webdriver模組，用於控制Chrome瀏覽器。
from selenium import webdriver

# 從Selenium函式庫的common.by模組中導入`By`，用於指定元素的定位方式。
from selenium.webdriver.common.by import By

# 建立ChromeOptions物件，這個物件用於設定Chrome瀏覽器的選項。
chrome_options = webdriver.ChromeOptions()

# 使用add_argument()方法添加--headless參數，使Chrome以headless模式運行，即在後台運行，不顯示GUI界面。
chrome_options.add_argument('--headless')

# 使用add_argument()方法添加--no-sandbox參數，這是一個必要的參數，用於解決在某些環境下的運行問題。
chrome_options.add_argument('--no-sandbox')

# 將 headless 屬性設置為 True。
chrome_options.headless = True

# 初始化Chrome WebDriver，並傳遞Chromedriver的路徑和選項。
driver = webdriver.Chrome(options=chrome_options)

# 設置隱式等待時間為10秒。隱式等待是在查找元素時的一種等待方式，
# 如果WebDriver沒有找到元素，它會等待一定的時間再進行查找，直到超過設定的時間為止。
driver.implicitly_wait(10)

# 使用get方法訪問指定的URL，在此是"https://www.flag.com.tw/books/school_code_n_algo"。
driver.get("https://www.flag.com.tw/books/school_code_n_algo")

# 使用find_element()方法按類別名稱（CLASS_NAME）查找指定的元素，在此是`rwd-table`。
p = driver.find_element(By.CLASS_NAME, "rwd-table")

# 輸出p元素的文本內容。
print(p.text)

# 這個方法會關閉WebDriver並結束瀏覽器進程。這是為了確保在使用完瀏覽器後，程式可以正確地退出。
driver.quit()

"""# 使用 find_element & By_ID

分別找出並列印ID為toggle-search與search-form-mobile的標籤名稱。
"""

# 這段程式碼是使用Selenium函式庫來控制Chrome瀏覽器，並從網頁中提取特定元素的文本內容。


# 導入Selenium的webdriver模組，用於控制Chrome瀏覽器。
from selenium import webdriver

# 從Selenium函式庫的common.by模組中導入`By`，用於指定元素的定位方式。
from selenium.webdriver.common.by import By

# 建立ChromeOptions物件，這個物件用於設定Chrome瀏覽器的選項。
chrome_options = webdriver.ChromeOptions()

# 使用add_argument()方法添加--headless參數，使Chrome以headless模式運行，即在後台運行，不顯示GUI界面。
chrome_options.add_argument('--headless')

# 使用add_argument()方法添加--no-sandbox參數，這是一個必要的參數，用於解決在某些環境下的運行問題。
chrome_options.add_argument('--no-sandbox')

# 將 headless 屬性設置為 True。
chrome_options.headless = True

# 初始化Chrome WebDriver，並傳遞Chromedriver的路徑和選項。
driver = webdriver.Chrome(options=chrome_options)

# 設置隱式等待時間為10秒。隱式等待是在查找元素時的一種等待方式，
# 如果WebDriver沒有找到元素，它會等待一定的時間再進行查找，直到超過設定的時間為止。
driver.implicitly_wait(10)

# 使用get方法訪問指定的URL，在此是"https://www.flag.com.tw/books/school_code_n_algo"。
driver.get("https://www.flag.com.tw/books/school_code_n_algo")

# 使用find_element方法根據ID定位元素，將其儲存在form變數中。
form = driver.find_element(By.ID, "toggle-search")

# 列印form元素的標籤名稱。
print(form.tag_name)
print('---------------------------')

# 使用find_element方法根據ID定位元素，將其儲存在form1變數中。
form1 = driver.find_element(By.ID, "search-form-mobile")

# 列印form1元素的標籤名稱。
print(form1.tag_name)

# 這個方法會關閉WebDriver並結束瀏覽器進程。這是為了確保在使用完瀏覽器後，程式可以正確地退出。
driver.quit()

"""# 使用 find_element & By.NAME

找出NAME為book_search的標籤名稱與type屬性值。
"""

# 這段程式碼是使用Selenium函式庫來控制Chrome瀏覽器，並從網頁中提取特定元素的文本內容。


# 導入Selenium的webdriver模組，用於控制Chrome瀏覽器。
from selenium import webdriver

# 從Selenium函式庫的common.by模組中導入`By`，用於指定元素的定位方式。
from selenium.webdriver.common.by import By

# 建立ChromeOptions物件，這個物件用於設定Chrome瀏覽器的選項。
chrome_options = webdriver.ChromeOptions()

# 使用add_argument()方法添加--headless參數，使Chrome以headless模式運行，即在後台運行，不顯示GUI界面。
chrome_options.add_argument('--headless')

# 使用add_argument()方法添加--no-sandbox參數，這是一個必要的參數，用於解決在某些環境下的運行問題。
chrome_options.add_argument('--no-sandbox')

# 將 headless 屬性設置為 True。
chrome_options.headless = True

# 初始化Chrome WebDriver，並傳遞Chromedriver的路徑和選項。
driver = webdriver.Chrome(options=chrome_options)

# 設置隱式等待時間為10秒。隱式等待是在查找元素時的一種等待方式，
# 如果WebDriver沒有找到元素，它會等待一定的時間再進行查找，直到超過設定的時間為止。
driver.implicitly_wait(10)

# 使用get方法訪問指定的URL，在此是"https://www.flag.com.tw/books/school_code_n_algo"。
driver.get("https://www.flag.com.tw/books/school_code_n_algo")

# 使用find_element方法根據NAME定位元素，將其儲存在user變數中。
user = driver.find_element(By.NAME, "book_search")

# 列印user元素的標籤名稱。
print(user.tag_name)
print('---------------------------')

# 列印user元素的type屬性值。
print(user.get_attribute("type"))

"""# 使用 find_element & By.XPATH

請找出並列印"新觀念 Visual C# 程式設計範例教本 第六版"的標籤名稱、文本內容，以及圖片網址。
"""

# 這段程式碼是使用Selenium函式庫來控制Chrome瀏覽器，並從網頁中提取特定元素的文本內容。


# 導入Selenium的webdriver模組，用於控制Chrome瀏覽器。
from selenium import webdriver

# 從Selenium函式庫的common.by模組中導入`By`，用於指定元素的定位方式。
from selenium.webdriver.common.by import By

# 建立ChromeOptions物件，這個物件用於設定Chrome瀏覽器的選項。
chrome_options = webdriver.ChromeOptions()

# 使用add_argument()方法添加--headless參數，使Chrome以headless模式運行，即在後台運行，不顯示GUI界面。
chrome_options.add_argument('--headless')

# 使用add_argument()方法添加--no-sandbox參數，這是一個必要的參數，用於解決在某些環境下的運行問題。
chrome_options.add_argument('--no-sandbox')

# 將 headless 屬性設置為 True。
chrome_options.headless = True

# 初始化Chrome WebDriver，並傳遞Chromedriver的路徑和選項。
driver = webdriver.Chrome(options=chrome_options)

# 設置隱式等待時間為10秒。隱式等待是在查找元素時的一種等待方式，
# 如果WebDriver沒有找到元素，它會等待一定的時間再進行查找，直到超過設定的時間為止。
driver.implicitly_wait(10)

# 使用get方法訪問指定的URL，在此是"https://www.flag.com.tw/books/school_code_n_algo"。
driver.get("https://www.flag.com.tw/books/school_code_n_algo")

# 使用XPath定位到標籤名稱，並將其儲存在form1變數中。
form1 = driver.find_element(By.XPATH, "/html/body/section[2]/table/tbody/tr[1]/td[1]/a/p")

# 列印form1元素的標籤名稱。
print(form1.tag_name)
print('---------------------------')

# 使用XPath定位到文本內容，並將其儲存在form2變數中。
form2 = driver.find_element(By.XPATH, "/html/body/section[2]/table/tbody/tr[1]/td[1]/a")


# 列印form2元素的文本內容。
print(form2.text)
print('---------------------------')

# 使用XPath定位到文本內容，並將其儲存在pwd1變數中。
pwd1 = driver.find_element(By.XPATH, "/html/body/section[2]/table/tbody/tr[1]/td[1]/a/img")

# 列印pwd1元素的圖片鏈結。
print(pwd1.get_attribute("src"))
print('---------------------------')

# 這個方法會關閉WebDriver並結束瀏覽器進程。這是為了確保在使用完瀏覽器後，程式可以正確地退出。
driver.quit()

"""# 使用 find_element & By.LINK_TEXT

請找出並列印"世界第一簡單的 Python「超」入門 - 零基礎 OK！ChatGPT 隨時當助教！"的網址鏈結。
"""

# 這段程式碼是使用Selenium函式庫來控制Chrome瀏覽器，並從網頁中提取特定元素的文本內容。


# 導入Selenium的webdriver模組，用於控制Chrome瀏覽器。
from selenium import webdriver

# 從Selenium函式庫的common.by模組中導入`By`，用於指定元素的定位方式。
from selenium.webdriver.common.by import By

# 建立ChromeOptions物件，這個物件用於設定Chrome瀏覽器的選項。
chrome_options = webdriver.ChromeOptions()

# 使用add_argument()方法添加--headless參數，使Chrome以headless模式運行，即在後台運行，不顯示GUI界面。
chrome_options.add_argument('--headless')

# 使用add_argument()方法添加--no-sandbox參數，這是一個必要的參數，用於解決在某些環境下的運行問題。
chrome_options.add_argument('--no-sandbox')

# 將 headless 屬性設置為 True。
chrome_options.headless = True

# 初始化Chrome WebDriver，並傳遞Chromedriver的路徑和選項。
driver = webdriver.Chrome(options=chrome_options)

# 設置隱式等待時間為10秒。隱式等待是在查找元素時的一種等待方式，
# 如果WebDriver沒有找到元素，它會等待一定的時間再進行查找，直到超過設定的時間為止。
driver.implicitly_wait(10)

# 使用get方法訪問指定的URL，在此是"https://www.flag.com.tw/books/school_code_n_algo"。
driver.get("https://www.flag.com.tw/books/school_code_n_algo")

# 通過LINK_TEXT鏈接文本"世界第一簡單的 Python「超」入門 - 零基礎 OK！ChatGPT 隨時當助教！"定位到超鏈接元素，並將其儲存在link1變數中。
link1 = driver.find_element(By.LINK_TEXT, "世界第一簡單的 Python「超」入門 - 零基礎 OK！ChatGPT 隨時當助教！")

# 列印link1元素的URL。
print(link1.get_attribute("href"))

# 這個方法會關閉WebDriver並結束瀏覽器進程。這是為了確保在使用完瀏覽器後，程式可以正確地退出。
driver.quit()

"""# 使用 find_element & By.PARTIAL_LINK_TEXT

請找出並列印部分文字為"高效率打造辦公室作業"的網址鏈結。
"""

# 這段程式碼是使用Selenium函式庫來控制Chrome瀏覽器，並從網頁中提取特定元素的文本內容。


# 導入Selenium的webdriver模組，用於控制Chrome瀏覽器。
from selenium import webdriver

# 從Selenium函式庫的common.by模組中導入`By`，用於指定元素的定位方式。
from selenium.webdriver.common.by import By

# 建立ChromeOptions物件，這個物件用於設定Chrome瀏覽器的選項。
chrome_options = webdriver.ChromeOptions()

# 使用add_argument()方法添加--headless參數，使Chrome以headless模式運行，即在後台運行，不顯示GUI界面。
chrome_options.add_argument('--headless')

# 使用add_argument()方法添加--no-sandbox參數，這是一個必要的參數，用於解決在某些環境下的運行問題。
chrome_options.add_argument('--no-sandbox')

# 將 headless 屬性設置為 True。
chrome_options.headless = True

# 初始化Chrome WebDriver，並傳遞Chromedriver的路徑和選項。
driver = webdriver.Chrome(options=chrome_options)

# 設置隱式等待時間為10秒。隱式等待是在查找元素時的一種等待方式，
# 如果WebDriver沒有找到元素，它會等待一定的時間再進行查找，直到超過設定的時間為止。
driver.implicitly_wait(10)

# 使用get方法訪問指定的URL，在此是"https://www.flag.com.tw/books/school_code_n_algo"。
driver.get("https://www.flag.com.tw/books/school_code_n_algo")

# 通過PARTIAL_LINK_TEXT鏈接文本"高效率打造辦公室作業念"定位到超鏈接元素，並將其儲存在link1變數中。
link1 = driver.find_element(By.PARTIAL_LINK_TEXT, "高效率打造辦公室作業")

# 列印link1元素的URL。
print(link1.get_attribute("href"))

# 這個方法會關閉WebDriver並結束瀏覽器進程。這是為了確保在使用完瀏覽器後，程式可以正確地退出。
driver.quit()

"""# 使用 find_element & By.CSS_SELECTOR"""

# 這段程式碼是使用Selenium函式庫來控制Chrome瀏覽器，並從網頁中提取特定元素的文本內容。


# 導入Selenium的webdriver模組，用於控制Chrome瀏覽器。
from selenium import webdriver

# 從Selenium函式庫的common.by模組中導入`By`，用於指定元素的定位方式。
from selenium.webdriver.common.by import By

# 建立ChromeOptions物件，這個物件用於設定Chrome瀏覽器的選項。
chrome_options = webdriver.ChromeOptions()

# 使用add_argument()方法添加--headless參數，使Chrome以headless模式運行，即在後台運行，不顯示GUI界面。
chrome_options.add_argument('--headless')

# 使用add_argument()方法添加--no-sandbox參數，這是一個必要的參數，用於解決在某些環境下的運行問題。
chrome_options.add_argument('--no-sandbox')

# 將 headless 屬性設置為 True。
chrome_options.headless = True

# 初始化Chrome WebDriver，並傳遞Chromedriver的路徑和選項。
driver = webdriver.Chrome(options=chrome_options)

# 設置隱式等待時間為10秒。隱式等待是在查找元素時的一種等待方式，
# 如果WebDriver沒有找到元素，它會等待一定的時間再進行查找，直到超過設定的時間為止。
driver.implicitly_wait(10)

# 使用get方法訪問指定的URL，在此是"https://www.flag.com.tw/books/school_code_n_algo"。
driver.get("https://www.flag.com.tw/books/school_code_n_algo")

# 使用find_element方法通過CSS選擇器，尋找所有<section>標籤中帶有class屬性值為"allbooks"的元素。
# By.CSS_SELECTOR是指定使用CSS選擇器來定位元素。
# 目的是找到網頁中第一個具有class為"allbooks"的<section>標籤元素，並將其賦值給變數content。
content = driver.find_element(By.CSS_SELECTOR, "section.allbooks")

# 列印content元素的文本內容。
print(content.text)

# 這個方法會關閉WebDriver並結束瀏覽器進程。這是為了確保在使用完瀏覽器後，程式可以正確地退出。
driver.quit()